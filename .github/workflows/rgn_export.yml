name: rgn-export
on: workflow_dispatch
permissions: { contents: write }
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: '3.11' }

    - name: Install deps
      run: python -m pip install --upgrade pip pandas numpy

    - name: Show heads (zur Kontrolle)
      run: |
        echo "---- zones ----"; head -n 2 TSM-136D_zonen_recommended.csv || true
        echo "---- rest  ----"; head -n 2 TSM-136D_R_estimates.csv || true
        echo "---- base  ----"; head -n 2 TSM-136D_zonen_baseline.csv || true

    - name: Write robust exporter (inline)
      run: |
        cat > rgn_export_ci.py << 'PY'
        import argparse, json, hashlib, os, sys, re
        from datetime import datetime, timezone
        import pandas as pd, numpy as np
        def md5(p,chunk=8192):
            import hashlib; m=hashlib.md5()
            with open(p,'rb') as f:
                for b in iter(lambda:f.read(chunk),b''): m.update(b)
            return m.hexdigest()
        def read_csv_smart(path):
            for enc in ("utf-8","utf-8-sig"):
                for sep in (None,",",";","\t"):
                    try:
                        df=pd.read_csv(path,encoding=enc,sep=sep)
                        if df.shape[1]==1 and any(x in str(df.columns[0]) for x in (";","\t",",")): continue
                        return df
                    except: pass
            return pd.read_csv(path,engine="python",sep=None)
        def norm(s): return re.sub(r'[^0-9a-z]+','',s.lower())
        def find(df, keys):
            nm={norm(c):c for c in df.columns}
            for k in keys:
                if k in nm: return nm[k]
            for n,c in nm.items():
                if any(k in n for k in keys): return c
            return None
        def detect(zr,re):
            K =  find(re,["rcombonorm","r_combo_norm","rcombo","r","rplv","rqeffraw"])
            PHI= find(re,["dphi","d_phi","delta_phi","phi","phase","phirad","phideg","phasedeg"])
            TAU= find(re,["tau","taucl","taurgn"])
            ZO = find(zr,["zone","zonelabel"])
            B  = find(zr,["b","bind","bindung"])
            S  = find(zr,["s","split","spaltung"])
            return K,PHI,TAU,ZO,B,S
        def run(zones,rest,base,outdir,over=None):
            zr=read_csv_smart(zones); re=read_csv_smart(rest)
            zb=None
            if base and os.path.exists(base):
                try: zb=read_csv_smart(base)
                except: zb=None
            if over:  # manual override
                K,PHI,TAU,ZO,B,S = over
            else:
                K,PHI,TAU,ZO,B,S = detect(zr,re)
            miss=[]
            for name,val,src in [("K",K,"rest"),("varphi",PHI,"rest"),("tau",TAU,"rest"),
                                 ("zone",ZO,"zones"),("B",B,"zones"),("S",S,"zones")]:
                if val is None or val not in (re.columns if src=="rest" else zr.columns):
                    miss.append(f"{name} (in {src})")
            if miss:
                print("::error::Column detection failed ->", ", ".join(miss)); return 2
            n=min(len(zr),len(re)); zr=zr.iloc[:n].reset_index(drop=True); re=re.iloc[:n].reset_index(drop=True)
            df=pd.concat([zr,re],axis=1)
            df["K"]=pd.to_numeric(df[K],errors="coerce")
            PHInorm=norm(PHI)
            if "deg" in PHInorm: df["varphi"]=np.radians(pd.to_numeric(df[PHI],errors="coerce"))
            else:                 df["varphi"]=pd.to_numeric(df[PHI],errors="coerce")
            df["varphi_deg"]=np.degrees(df["varphi"])
            df["tau_rgn"]=pd.to_numeric(df[TAU],errors="coerce")
            if ZO!="zone": df.rename(columns={ZO:"zone"},inplace=True)
            if B!="B":     df.rename(columns={B:"B"},inplace=True)
            if S!="S":     df.rename(columns={S:"S"},inplace=True)
            cols=['id','K','varphi','varphi_deg','tau_rgn','B','S','zone']; df["id"]=np.arange(len(df))
            for c in ["R_Qeff_raw","R_PLV","R_combo_norm","F_res","F_cap","C","C_cl","dphi_cl","tau_cl"]:
                if c in df.columns: cols.append(c)
            os.makedirs(outdir,exist_ok=True)
            df[cols].to_csv(os.path.join(outdir,"RGN_state_v0.2.csv"),index=False)
            # manifest
            man={"rgn_version":"0.2.3-ci",
                 "generated_utc":datetime.now(timezone.utc).isoformat(),
                 "inputs":[{"filename":os.path.basename(zones),"md5":md5(zones),"rows":int(len(zr)),"cols":int(zr.shape[1])},
                           {"filename":os.path.basename(rest),"md5":md5(rest),"rows":int(len(re)),"cols":int(re.shape[1])}],
                 "mapping":{"K":K,"varphi":PHI,"tau_rgn":TAU,"zone":"zone","B":"B","S":"S"}}
            with open(os.path.join(outdir,"RGN_manifest_v0.2.json"),"w",encoding="utf-8") as f:
                json.dump(man, f, indent=2)
            # report
            rep=["# RGN Report v0.2\n",
                 f"Detected columns: K='{K}', varphi='{PHI}', tau='{TAU}', zone='zone', B='B', S='S'\n",
                 "\n## Zone shares\n" + (df['zone'].value_counts(normalize=True).to_string() if 'zone' in df.columns else "") + "\n"]
            with open(os.path.join(outdir,"RGN_report_v0.2.md"),"w",encoding="utf-8") as f: f.write("".join(rep))
            return 0
        if __name__=="__main__":
            ap=argparse.ArgumentParser()
            ap.add_argument("--zones",required=True); ap.add_argument("--rest",required=True)
            ap.add_argument("--baseline"); ap.add_argument("--outdir",default=".")
            args=ap.parse_args()
            # auto try a few common mappings BEFORE falling back to auto-detect
            trials=[
              ("auto",None),
              ("setA",("R_combo_norm","dphi","tau","zone","B","S")),
              ("setB",("R_combo_norm","d_phi","tau","zone","B","S")),
              ("setC",("R_combo_norm","phi","tau","zone","B","S")),
              ("setD",("R_PLV","dphi","tau","zone","B","S")),
              ("setE",("R_Qeff_raw","dphi","tau","zone","B","S")),
              ("setF",("R_combo_norm","dphi","tau_cl","zone","Bindung","Spaltung")),
              ("setG",("R_combo_norm","dphi_deg","tau","Zone","Bindung","Spaltung")),
            ]
            for name,over in trials:
                code=run(args.zones,args.rest,args.baseline,args.outdir,over)
                print(f"[trial {name}] exit={code}")
                if code==0: sys.exit(0)
            sys.exit(1)
        PY

    - name: Run exporter (auto-try mappings)
      run: python rgn_export_ci.py --zones TSM-136D_zonen_recommended.csv --rest TSM-136D_R_estimates.csv --baseline TSM-136D_zonen_baseline.csv --outdir .

    - name: Commit outputs
      run: |
        git config user.name "rgn-bot"
        git config user.email "rgn-bot@example.com"
        git add RGN_state_v0.2.csv RGN_manifest_v0.2.json RGN_report_v0.2.md
        git diff --cached --quiet || git commit -m "RGN export (auto)"
        git push
