name: TSM Bridge CI
- name: Validate (inline)
run: |
cat > /tmp/validate.py <<'PY'
#!/usr/bin/env python3
import argparse, csv, json


ap = argparse.ArgumentParser()
ap.add_argument("--in", dest="inp", required=True)
ap.add_argument("--out", dest="out", required=True)
ap.add_argument("--B-lo", type=float, default=0.2)
ap.add_argument("--B-hi", type=float, default=0.8)
ap.add_argument("--compare", dest="compare", default=None)
a = ap.parse_args()


rows = list(csv.DictReader(open(a.inp, newline="")))
fns = rows[0].keys() if rows else []
required = ["C","dphi","tau","F_res","F_cap","B","S","zone"]
missing = [c for c in required if c not in fns]


ok_cols = (len(missing) == 0)
ok_vals = True
val_errs = []
eps = 1e-6
for i, r in enumerate(rows):
try:
B = float(r["B"]) ; S = float(r["S"]) ; z = (r["zone"] or "").strip()
except Exception as e:
ok_vals = False
val_errs.append({"i": i, "error": f"parse: {e}"})
continue
if not (0.0 - eps <= B <= 1.0 + eps):
ok_vals = False
val_errs.append({"i": i, "error": f"B out of range: {B}"})
if not (0.0 - eps <= S <= 1.0 + eps):
ok_vals = False
val_errs.append({"i": i, "error": f"S out of range: {S}"})
if abs((1.0 - B) - S) > 1e-6:
ok_vals = False
val_errs.append({"i": i, "error": f"S != 1-B (B={B}, S={S})"})
zone = "fragmentiert" if B <= a.B_lo else ("regulativ" if B <= a.B_hi else "kohÃ¤rent")
if z != zone:
ok_vals = False
val_errs.append({"i": i, "error": f"zone mismatch: got '{z}', want '{zone}' for B={B}"})


diffs = []
if a.compare:
try:
ref = list(csv.DictReader(open(a.compare, newline="")))
n = min(len(rows), len(ref))
for k in range(n):
r = rows[k]; rr = ref[k]
for fld in ("F_res","F_cap","B","S"):
try:
a1 = float(r.get(fld, "")); a2 = float(rr.get(fld, ""))
if abs(a1 - a2) > 1e-5:
diffs.append({"i": k, "field": fld, "got": a1, "want": a2})
except:
diffs.append({"i": k, "field": fld, "got": r.get(fld, ""), "want": rr.get(fld, "")})
if (r.get("zone", "").strip() != rr.get("zone", "").strip()):
diffs.append({"i": k, "field": "zone", "got": r.get("zone", ""), "want": rr.get("zone", "")})
except FileNotFoundError:
pass


report = {
"file": a.inp,
"ok_columns": ok_cols,
"missing_columns": missing,
"ok_values": ok_vals,
"value_errors": val_errs,
"diffs_vs_reference": diffs,
"passed": ok_cols and ok_vals and len(diffs) == 0
}


json.dump(report, open(a.out, "w"), indent=2, ensure_ascii=False)


# Mit Exit-Code 1 fehlschlagen, wenn nicht bestanden
import sys
if not report["passed"]:
print(json.dumps(report, indent=2, ensure_ascii=False))
sys.exit(1)
PY
python /tmp/validate.py --in /tmp/comp.csv --out /tmp/report.json --B-lo 0.2 --B-hi 0.8 --compare bridge/expected_computed_minidataset.csv
echo "--- Validation Report ---" && cat /tmp/report.json


- name: Upload artifacts (always)
if: always()
uses: actions/upload-artifact@v4
with:
name: tsm-ci-artifacts
path: |
/tmp/comp.csv
/tmp/exp_K_field.csv
/tmp/exp_T_eff.csv
/tmp/report.json
